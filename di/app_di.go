// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injections

import (
	"github.com/go-playground/validator/v10"
	"github.com/gofiber/fiber/v2"
	"gorm.io/gorm"
	"personal-growth/common/enums"
	"personal-growth/controllers"
	"personal-growth/repositories"
	"personal-growth/routers"
	"personal-growth/services"
	"personal-growth/services/interfaces"
)

// Injectors from auth_di.go:

// InitAuth initializes the Auth module using Wire.
func InitAuth(db *gorm.DB) *fiber.App {
	userRepository := ProvideUserRepository(db)
	validate := ProvideValidator()
	authService := ProvideAuthService(userRepository, validate)
	authController := ProvideAuthController(authService)
	app := ProvideAuthRouter(authController, db)
	return app
}

// Injectors from issue_di.go:

// InitIssue initializes the Issue module using Wire.
func InitIssue(db *gorm.DB) *fiber.App {
	issueRepository := ProvideIssueRepository(db)
	validate := ProvideValidator()
	issueService := ProvideIssueService(issueRepository, validate)
	issueController := ProvideIssueController(issueService)
	app := ProvideIssueRouter(issueController, db)
	return app
}

// Injectors from payment_di.go:

// InitPayment initializes the Payment module using Wire.
func InitPayment(db *gorm.DB) *fiber.App {
	paymentRepository := ProvidePaymentRepository(db)
	validate := ProvideValidator()
	paymentService := ProvidePaymentService(paymentRepository, validate)
	paymentController := ProvidePaymentController(paymentService)
	app := ProvidePaymentRouter(paymentController, db)
	return app
}

// Injectors from project_di.go:

// InitProject initializes the Project module using Wire.
func InitProject(db *gorm.DB) *fiber.App {
	projectRepository := ProvideProjectRepository(db)
	validate := ProvideValidator()
	projectService := ProvideProjectService(projectRepository, validate)
	projectController := ProvideProjectController(projectService)
	app := ProvideProjectRouter(projectController, db)
	return app
}

// auth_di.go:

// ProvideValidator creates a new validator instance.
func ProvideValidator() *validator.Validate {
	v := validator.New()
	enums.RegisterCustomValidations(v)
	return v
}

// ProvideUserRepository creates a new User repository.
func ProvideUserRepository(db *gorm.DB) repositories.UserRepository {
	return repositories.NewUserRepository(db)
}

// ProvideAuthService creates a new Auth service.
func ProvideAuthService(repo repositories.UserRepository, validate *validator.Validate) service_interfaces.AuthService {
	return services.NewAuthServiceImpl(repo, validate)
}

// ProvideAuthController creates a new Auth controller.
func ProvideAuthController(service service_interfaces.AuthService) *controllers.AuthController {
	return controllers.NewAuthController(service)
}

// ProvideAuthRouter creates a new Auth router.
func ProvideAuthRouter(controller *controllers.AuthController, db *gorm.DB) *fiber.App {
	return routers.NewAuthRouter(controller, db)
}

// issue_di.go:

// ProvideIssueRepository creates a new Issue repository.
func ProvideIssueRepository(db *gorm.DB) repositories.IssueRepository {
	return repositories.NewIssueRepository(db)
}

// ProvideIssueService creates a new Issue service.
func ProvideIssueService(repo repositories.IssueRepository, validate *validator.Validate) service_interfaces.IssueService {
	return services.NewIssueServiceImpl(repo, validate)
}

// ProvideIssueController creates a new Issue controller.
func ProvideIssueController(service service_interfaces.IssueService) *controllers.IssueController {
	return controllers.NewIssueController(service)
}

// ProvideIssueRouter creates a new Issue router.
func ProvideIssueRouter(controller *controllers.IssueController, db *gorm.DB) *fiber.App {
	return routers.NewIssueRouter(controller, db)
}

// payment_di.go:

// ProvidePaymentRepository creates a new Payment repository.
func ProvidePaymentRepository(db *gorm.DB) repositories.PaymentRepository {
	return repositories.NewPaymentRepository(db)
}

// ProvidePaymentService creates a new Payment service.
func ProvidePaymentService(repo repositories.PaymentRepository, validate *validator.Validate) service_interfaces.PaymentService {
	return services.NewPaymentServiceImpl(repo, validate)
}

// ProvidePaymentController creates a new Payment controller.
func ProvidePaymentController(service service_interfaces.PaymentService) *controllers.PaymentController {
	return controllers.NewPaymentController(service)
}

// ProvidePaymentRouter creates a new Payment router.
func ProvidePaymentRouter(controller *controllers.PaymentController, db *gorm.DB) *fiber.App {
	return routers.NewPaymentRouter(controller, db)
}

// project_di.go:

// ProvideProjectRepository creates a new Project repository.
func ProvideProjectRepository(db *gorm.DB) repositories.ProjectRepository {
	return repositories.NewProjectRepository(db)
}

// ProvideProjectService creates a new Project service.
func ProvideProjectService(repo repositories.ProjectRepository, validate *validator.Validate) service_interfaces.ProjectService {
	return services.NewProjectServiceImpl(repo, validate)
}

// ProvideProjectController creates a new Project controller.
func ProvideProjectController(service service_interfaces.ProjectService) *controllers.ProjectController {
	return controllers.NewProjectController(service)
}

// ProvideProjectRouter creates a new Project router.
func ProvideProjectRouter(controller *controllers.ProjectController, db *gorm.DB) *fiber.App {
	return routers.NewProjectRouter(controller, db)
}
