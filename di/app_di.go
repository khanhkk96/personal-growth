// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injections

import (
	"github.com/go-playground/validator/v10"
	"github.com/gofiber/fiber/v2"
	"gorm.io/gorm"
	"personal-growth/controllers"
	"personal-growth/repositories"
	"personal-growth/routers"
	"personal-growth/services"
)

// Injectors from auth.go:

// InitAuth initializes the Auth module using Wire.
func InitAuth(db *gorm.DB) *fiber.App {
	userRepository := ProvideUserRepository(db)
	validate := ProvideValidator()
	authService := ProvideAuthService(userRepository, validate)
	authController := ProvideAuthController(authService)
	app := ProvideAuthRouter(authController, db)
	return app
}

// auth.go:

// ProvideValidator creates a new validator instance.
func ProvideValidator() *validator.Validate {
	return validator.New()
}

// ProvideUserRepository creates a new User repository.
func ProvideUserRepository(db *gorm.DB) repositories.UserRepository {
	return repositories.NewUserRepository(db)
}

// ProvideAuthService creates a new Auth service.
func ProvideAuthService(repo repositories.UserRepository, validate *validator.Validate) services.AuthService {
	return services.NewAuthServiceImpl(repo, validate)
}

// ProvideAuthController creates a new Auth controller.
func ProvideAuthController(service services.AuthService) *controllers.AuthController {
	return controllers.NewAuthController(service)
}

// ProvideAuthRouter creates a new Auth router.
func ProvideAuthRouter(controller *controllers.AuthController, db *gorm.DB) *fiber.App {
	return routers.NewAuthRouter(controller, db)
}
